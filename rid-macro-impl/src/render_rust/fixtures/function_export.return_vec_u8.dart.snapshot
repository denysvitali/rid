 // TODO: see ../render_function_export_test.rs why this is currently broken

 extension Rid_Vec_ExtOnPointerRidVec_Vec on ffigen_bind.RidVec_Vec {
   int operator [](int idx) {
     final len = this.length;
     if (!(0 <= idx && idx < len)) {
       throw AssertionError("Out of range access on List<int>[$idx] of length $len");
     }
     return rid_ffi.rid_get_item_Vec(this, idx);
   }

   void dispose() {
     rid_ffi.rid_free_Vec(this);
   }

   Rid_RidVec_Vec_Iterable iter() => Rid_RidVec_Vec_Iterable(this);
 }

 class Rid_RidVec_Vec_Iterator implements Iterator<int> {
   int _currentIdx = -1;
   final ffigen_bind.RidVec_Vec _vec;
   final int _limit;

   Rid_RidVec_Vec_Iterator(this._vec) : _limit = _vec.length - 1;

   int get current => _vec[_currentIdx];

   bool moveNext() {
     if (_currentIdx >= _limit) return false;
     _currentIdx++;
     return true;
   }
 }

 class Rid_RidVec_Vec_Iterable with
     dart_collection.IterableMixin<int> {
   final ffigen_bind.RidVec_Vec _vec;
   Rid_RidVec_Vec_Iterable(this._vec);

   Iterator<int> get iterator =>
     Rid_RidVec_Vec_Iterator(this._vec);
 }
