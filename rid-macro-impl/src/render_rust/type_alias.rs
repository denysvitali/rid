use proc_macro2::TokenStream;
use quote::{format_ident, quote_spanned};
use syn::Ident;

/// Types like `*const X` and `*mut X` are aliased in order to avoid confusing and
/// non-deterministic names being generated by bindgen when they're used as generic types, for
/// instance in `RidVec<T>`.
/// For example `*const Item` is aliased to `Pointer_Item` which then results in
/// `RidVec_Pointer_Item` instead of something like `RidVec______Item`.
#[derive(Debug, Clone)]
pub struct TypeAlias {
    pub alias: Ident,
    pub typedef: TokenStream,
    pub type_name: String,
    pub needs_free: bool,
}

impl TypeAlias {
    pub const POINTER_ALIAS_PREFIX: &'static str = "Pointer_";
    pub const POINTER_MUT_ALIAS_PREFIX: &'static str = "PointerMut_";

    // TODO: move struct to common and add an impl to render a dart extension
    // for the type_name to dispose it via this rust method
    // To make this work return the fn_ident from here.
    pub fn render_free(&self, ffi_prefix: TokenStream) -> TokenStream {
        let alias = &self.alias;
        let fn_ident = format_ident!("rid_free_{}", self.type_name);
        quote_spanned! { self.alias.span() =>
            #ffi_prefix
            fn #fn_ident(ptr: #alias) {
                let instance = unsafe {
                    assert!(!ptr.is_null());
                    let ptr: #alias = &mut *ptr;
                    let ptr = ptr.as_mut().unwrap();
                    Box::from_raw(ptr)
                };
                drop(instance);
            }
        }
    }
}
