const TYPEDEF_STRUCT: &str = "typedef struct ";
const TYPEDEF_STRUCT_LEN: usize = TYPEDEF_STRUCT.len();

pub struct CodeSections {
    pub dart_code: String,
    pub swift_code: String,
    pub structs: Vec<String>,
}

enum Section {
    Dart,
    Swift,
}

impl CodeSections {
    /// Code sections derived from binding.h generated by cbindgen with functions and structs
    /// expanded via rid-macro.
    pub fn new(binding: &str) -> Self {
        use Section::*;

        let mut dart_sections: Vec<Vec<String>> = vec![];
        let mut swift_sections: Vec<Vec<String>> = vec![];

        let mut inside_section: Option<Section> = None;
        let mut current_section: Vec<String> = vec![];

        let mut structs: Vec<String> = vec![];

        for line in binding.lines() {
            match &inside_section {
                Some(section) => {
                    let trimmed_line = line.trim();
                    if trimmed_line.len() < 2 {
                        continue;
                    }
                    if trimmed_line.starts_with("* ```") {
                        // Done with current code section
                        match section {
                            Dart => dart_sections.push(current_section),
                            Swift => swift_sections.push(current_section),
                        }
                        current_section = vec![];
                        inside_section = None;
                        continue;
                    }
                    // Inside code section
                    let without_comment = &trimmed_line[2..];
                    current_section.push(without_comment.to_string());
                }
                None => {
                    let trimmed = line.trim_start();
                    if trimmed.starts_with("* ```dart") {
                        // Starting new dart section
                        inside_section = Some(Dart);
                    } else if trimmed.starts_with("* ```swift") {
                        // Starting new swift section
                        inside_section = Some(Swift);
                    } else if trimmed.starts_with(TYPEDEF_STRUCT) {
                        // Outside any section, collecting structs via type defs
                        let (struct_name, _) = trimmed[TYPEDEF_STRUCT_LEN..]
                            .split_once(" ")
                            .expect(&format!(
                                "Invalid struct definition {}",
                                &trimmed
                            ));
                        structs.push(struct_name.to_string());
                    }
                    continue;
                }
            }
        }

        let dart_code = join_sections(dart_sections);
        let swift_code = join_sections(swift_sections);

        structs.sort();
        structs.dedup();

        Self {
            dart_code,
            swift_code,
            structs,
        }
    }
}

fn join_sections(sections: Vec<Vec<String>>) -> String {
    sections
        .into_iter()
        .map(|section| {
            let last_line = section.len() - 1;
            section.into_iter().enumerate().fold(
                "".to_string(),
                |acc, (idx, sect)| {
                    if idx == 0 || idx == last_line {
                        let new_line = if idx == 0 { "" } else { "\n" };
                        format!(
                            "{acc}{new_line}{sect}",
                            acc = acc,
                            new_line = new_line,
                            sect = sect
                        )
                    } else {
                        format!("{acc}\n  {ext}", acc = acc, ext = sect)
                    }
                },
            )
        })
        .fold("".to_string(), |acc, ref section| {
            let new_line = if acc == "" { "" } else { "\n\n" };
            format!(
                "{acc}{new_line}{section}",
                acc = acc,
                new_line = new_line,
                section = section
            )
        })
}
